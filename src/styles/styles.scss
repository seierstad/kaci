$border-color: rgba(127, 127, 255, 0.4);
$bg-and-section-bg-color: #77b3d9;
$padding-section-top: 1.2rem;
$padding-section-bottom: 0.5rem;
$padding-section-sides: 1rem;
$keyboard-section-height: 20vh;

$bg-color: #aff;
$scope-color: #ff0;

$envelope-circle-radius: 10;
$envelope-circle-radius-active: 30;
$envelope-circle-color: #000;
$envelope-line-color: #000;

$key-color-white: #fff;
$key-color-black: #000;
$key-color-down: #afe;
$key-color-dropped: #888;
$key-stroke-color: #000;

$waveform-selector-phase-indicator-color: #fff;

%squish-text {
    clip: rect(1px, 1px, 1px, 1px);
    height: 1px;
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px;
}

%unsquish-text {
    clip: auto;
    height: auto;
    overflow: visible;
    width: auto;
}

* {
    box-sizing: border-box;
}

body {
    background-color: $bg-color;
}

button {
    min-height: 3em;
}

section {
    background-color: rgba(2, 0, 127, 0.3);
    background-image: linear-gradient(90deg, rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0));
    border: 3px solid $border-color;
    border-radius: 0.5em;
    display: inline-block;
    margin: 2em 1em;
    padding: $padding-section-top $padding-section-sides $padding-section-bottom;
    position: relative;
}

.oscilloscope {
    background-color: $scope-color;
    height: 25vh;
    position: fixed;
    right: 0;
    top: 0;
    width: 25vw;
}

label {
    display: inline-block;
}

fieldset {
    display: inline-block;
}

.kaci-wrapper {
    margin-bottom: 20vh;
}

.blink {
    display: inline-block;
    height: 30px;
    width: 30px;
}

.controller .lines {
    stroke: $envelope-line-color;
    stroke-width: 3;
}


.envelope {
    .circles {
        .active {
            cursor: move;
            opacity: 0.5;
            r: $envelope-circle-radius-active;

            &.first,
            &.last {
                cursor: ns-resize;
            }
        }

        circle {
            cursor: grab;
            r: $envelope-circle-radius;
            transition-duration: 0.2s;
            transition-property: r;
            transition-timing-function: easeOutElastic;
        }
    }

    rect {
        cursor: crosshair;
    }
}

.sustain-envelope {
    box-sizing: content-box;
    margin: -20px;
    padding: 30px;
    width: calc(100% - 20px);

    .controller {
        overflow: visible;
    }
}

.sustain-bar {
    cursor: grab;
    stroke: $envelope-circle-color;
    stroke-linecap: round;
    stroke-width: $envelope-circle-radius * 2;

    &.active {
        cursor: ns-resize;
        stroke-width: $envelope-circle-radius-active * 2;
    }
}

@keyframes phase-indicator {
    0% {
        clip-path: inset(0 46px 0 0);
    }

    100% {
        clip-path: inset(0 0 0 46px);
    }
}

.waveform {
    &-selector {
        .flex-wrapper {
            display: flex;
            flex-direction: row;
            flex-wrap: wrap;

            > label {
                $button-bevel-shadow: 4px 4px 12px 1px rgba(255, 255, 255, 1) inset, 0 0 9px 1px rgba(0, 0, 0, 0.5) inset;
                $button-content-margin: 0.2rem;

                background-color: #eef;
                border: none;
                box-shadow: $button-bevel-shadow;
                display: inline-block;
                margin: 0.3rem;
                position: relative;
                text-align: center;
                transition-property: transform;

                &,
                &::before {
                    border-radius: 0.5rem;
                    transition-duration: 50ms;
                    transition-timing-function: ease;
                }

                &::before {
                    background-color: transparent;
                    bottom: 0;
                    box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.4);
                    content: "";
                    display: block;
                    left: 0;
                    position: absolute;
                    right: 0;
                    top: 0;
                    transition-property: opacity;
                }

                &:focus,
                &:hover {
                    will-change: transform;

                    &::before {
                        will-change: opacity;
                    }
                }

                &:active {
                    transform: translateY(1px);

                    &::before {
                        opacity: 0;
                    }
                }

                .phase-indicator {
                    background: $waveform-selector-phase-indicator-color;
                    display: block;
                    height: 50px;
                    left: $button-content-margin;
                    opacity: 0;
                    position: absolute;
                    top: $button-content-margin;
                    width: 50px;

                    .no-mask {
                        display: none;
                    }
                }

                &:active,
                &:focus,
                &:hover {
                    .phase-indicator {
                        will-change: opacity, clip-path;
                    }
                }


                br,
                input {
                    display: none;
                }

                canvas {
                    margin: $button-content-margin;
                }

                :checked {
                    ~ canvas {
                        background: rgba(30, 249, 255, 0.9);
                    }

                    ~ .phase-indicator {
                        animation: phase-indicator 1000ms steps(48, start) infinite;
                        opacity: 1;
                        will-change: clip-path;
                    }
                }
            }
        }
    }

    &-name {
        @extend %squish-text;
    }
}

.keyboard {
    $key-width-white: 1rem;
    $key-width-black-ratio: 0.7;
    $key-width-black: $key-width-white * $key-width-black-ratio;
    $black-margin-big: $key-width-white * (1 - ($key-width-black-ratio / 2));
    $black-margin-small: $key-width-white * ((1 - $key-width-black-ratio) / 2);


    background-color: $bg-and-section-bg-color;
    border-bottom: none;
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
    bottom: 0;
    height: $keyboard-section-height;
    left: 0;
    margin-bottom: 0;
    padding-left: 5rem;
    position: fixed;
    right: 0;
    width: calc(100vw - 2rem);
    z-index: 10;

    .keys {
        border: none;
        display: block;
        height: 100%;
        padding: 0;

        .keys-legend {
            bottom: 100%;
            position: absolute;
        }

        &-wrapper {
            display: flex;
            flex-direction: column;
            height: 100%;
        }
    }

    .white-keys .key,
    .black-keys .key-wrapper,
    .key-wrapper::before,
    .key-wrapper::after {
        flex: 1 0;
    }

    .white-keys {
        flex: 0 0 100%;

        > .key {
            background-color: $key-color-white;
            flex-basis: $key-width-white;
        }
    }

    $key-flex: #{$key-width-black / 1rem} 0 $key-width-black;
    $small-flex: #{$black-margin-small / 1rem} 0 $black-margin-small;
    $big-flex: #{$black-margin-big / 1rem} 0 $black-margin-big;
    $big-white-flex: #{($key-width-white + $black-margin-big) / 1rem} 0 #{$key-width-white + $black-margin-big};

    .black-keys {
        flex: 0 0 60%;
        position: relative;
        top: -100%;

        .key {
            background-color: $key-color-black;
            display: block;
            flex: $key-flex;
            height: 100%;


            &-wrapper {
                display: flex;
                flex-grow: $key-width-white / 1rem;

                &::before,
                &::after {
                    content: "";
                    display: block;
                    flex: $small-flex;
                }

                &.db,
                &.gb,
                &:first-child {
                    flex-grow: ($black-margin-big + $key-width-black + $black-margin-small) / 1rem;

                    &::before {
                        flex: $big-flex;
                    }
                }

                &.bb,
                &.eb,
                &:last-child {
                    flex-grow: ($black-margin-big + $key-width-black + $black-margin-small) / 1rem;

                    &::after {
                        flex: $big-flex;
                    }
                }
            }
        }
    }

    .start-e,
    .start-b {
        .key-wrapper {
            &.db,
            &.gb {
                &:first-child {
                    flex-grow: ($key-width-white + $black-margin-big + $key-width-black + $black-margin-small) / 1rem;

                    &::before {
                        flex: $big-white-flex;
                    }
                }
            }
        }
    }

    .end-c,
    .end-f {
        .key-wrapper {
            &.bb,
            &.eb {
                &:last-child {
                    flex-grow: ($black-margin-small + $key-width-black + $black-margin-big + $key-width-white) / 1rem;

                    &::after {
                        flex: $big-white-flex;
                    }
                }
            }
        }
    }

    .white-keys,
    .black-keys {
        display: flex;
        pointer-events: none;

        .key {
            align-items: stretch;
            border: 1px solid $key-stroke-color;
            display: flex;
            flex-direction: column-reverse;
            flex-wrap: nowrap;
            justify-content: flex-start;
            padding: 0;
            pointer-events: auto;

            &.down {
                background-color: $key-color-down;
            }

            &.dropped {
                background-color: $key-color-dropped;
            }
        }
    }

    .active-key,
    .in-chord {
        flex: 0 1 1rem;
        transition: all 0.5s ease;
    }

    .active-key {
        border-radius: 50%;
        margin: 0 auto;
        width: 1rem;
    }

    .in-chord {
        border-radius: 0;
        width: 100%;
    }

    .chord- {
        &0 {
            background-color: #f00;
        }

        &1 {
            background-color: #0f0;
        }

        &2 {
            background-color: #00f;
        }

        &3 {
            background-color: #088;
        }

        &4 {
            background-color: #808;
        }

        &5 {
            background-color: #880;
        }

        &6 {
            background-color: #888;
        }

        &7 {
            background-color: #f0f;
        }

        &8 {
            background-color: #ff0;
        }

        &9 {
            background-color: #0ff;
        }
    }

    .sliders {
        bottom: $padding-section-bottom;
        left: 1rem;
        position: absolute;
        transform: translateX(2rem) rotateZ(-90deg);
        transform-origin: bottom left;

        [for] {
            @extend %squish-text;
        }
    }

    [type="range"] {
        height: 1rem;
        width: calc(#{$keyboard-section-height} - #{$padding-section-top} - #{$padding-section-bottom});

        &:hover,
        &:focus {
            + [for] {
                @extend %unsquish-text;

                background-color: $bg-and-section-bg-color;
                bottom: 100%;
                transform: rotate(90deg);
                transform-origin: left bottom;
            }
        }
    }
}

.oscillator-pd-view {
    display: inline-block;
    position: relative;
    z-index: 1;

    canvas {
        position: absolute;
        z-index: -1;
    }
}

.oscillator-mix-view,
.oscillator-resonance-view {
    display: inline-block;
    padding-top: 2rem;
    position: relative;

    [type="range"] {
        left: 0;
        position: absolute;
        top: 0;
        width: 100%;
    }

    [type="range"] + label {
        position: absolute;
        top: 1.3rem;
    }

    fieldset {
        display: block;
    }
}

body {
    padding: 2rem;
}

.modulation-matrix {
    tbody {
        &:nth-of-type(odd) {
            background: rgba(255, 255, 0, 0.5);
        }

        &:nth-of-type(even) {
            background: rgba(255, 150, 0, 0.5);
        }
    }

    th[scope="rowgroup"] {
        margin: 3px;
        min-height: 1em;
        overflow: visible;
        padding: 0.5em;
        position: relative;

        &,
        span {
            writing-mode: vertical-lr;
        }
    }

    col {
        &:nth-of-type(2n) {
            background-color: rgba(0, 0, 0, 0.3);
        }

        &:nth-of-type(3n) {
            background-color: rgba(255, 0, 0, 0.3);
        }
    }

    label {
        color: transparent;
        font-size: 0;
        line-height: 0;
    }

    td {
        padding: 0.5em;
    }

    [type="range"] {
        width: 3em;
    }
}

.morse {
    &-svg {
        height: 3rem;
        min-width: 10rem;
        overflow: visible;
        width: 100%;
    }

    &-background {
        fill: #c0ffee;
    }

    .dit,
    .dah {
        stroke: #000;
        stroke-width: 5;
    }

    .guide {
        stroke: #f00;
        stroke-width: 1;
        vector-effect: non-scaling-stroke;
    }
}
